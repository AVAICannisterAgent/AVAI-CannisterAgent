#!/usr/bin/env python3
"""
Directory Cleanup and Screenshot Organization Script
Ensures screenshots are created in workspace/screenshots and maintains clean project structure.
"""

import os
import shutil
from pathlib import Path


def create_workspace_structure():
    """Create proper workspace directory structure"""
    workspace_dir = Path("workspace")
    workspace_dir.mkdir(exist_ok=True)
    
    # Create subdirectories
    subdirs = ["screenshots", "temp", "downloads", "exports"]
    for subdir in subdirs:
        (workspace_dir / subdir).mkdir(exist_ok=True)
        print(f"‚úÖ Created/verified: workspace/{subdir}")


def clean_root_directory():
    """Clean up root directory by organizing files"""
    root = Path(".")
    
    # Files to keep in root
    keep_in_root = {
        "main.py", "setup.py", "requirements.txt", "requirements-core.txt",
        "README.md", "LICENSE.md", "docker-compose.yml", "Dockerfile",
        ".gitignore", ".env.quality"
    }
    
    # Directories to keep in root
    keep_dirs = {
        ".git", ".vscode", ".claude", ".venv", "venv_new",
        "app", "config", "docs", "tests", "temp_analysis",
        "agent_learning", "llm_learning", "assets", "fonts",
        "frontend", "examples", "scripts", "sessions", "logs",
        "workspace", "openavai.egg-info"
    }
    
    moved_files = []
    
    for item in root.iterdir():
        if item.is_file():
            if item.name not in keep_in_root:
                # Check if it's a screenshot file
                if any(ext in item.name.lower() for ext in ['.jpg', '.png', '.jpeg', '.gif']):
                    dest = Path("workspace/screenshots") / item.name
                    if not dest.exists():
                        shutil.move(str(item), str(dest))
                        moved_files.append(f"Screenshot: {item.name} -> workspace/screenshots/")
                
                # Check if it's a test file
                elif item.name.startswith('test_') and item.suffix == '.py':
                    dest = Path("tests") / item.name
                    if not dest.exists():
                        shutil.move(str(item), str(dest))
                        moved_files.append(f"Test: {item.name} -> tests/")
                
                # Check if it's an analysis/debug file
                elif any(keyword in item.name.lower() for keyword in ['analyze', 'debug', 'diagnosis', 'fix']):
                    dest = Path("temp_analysis") / item.name
                    if not dest.exists():
                        shutil.move(str(item), str(dest))
                        moved_files.append(f"Analysis: {item.name} -> temp_analysis/")
    
    return moved_files


def verify_screenshot_configuration():
    """Verify screenshot service is configured for workspace"""
    screenshot_service_path = Path("app/core/screenshot/centralized_screenshot_service.py")
    
    if screenshot_service_path.exists():
        try:
            with open(screenshot_service_path, 'r', encoding='utf-8') as f:
                content = f.read()
        except UnicodeDecodeError:
            # Try with different encoding
            with open(screenshot_service_path, 'r', encoding='latin-1') as f:
                content = f.read()
        
        if 'workspace' in content and 'screenshots' in content:
            print("‚úÖ Screenshot service configured for workspace directory")
            return True
        else:
            print("‚ö†Ô∏è Screenshot service may need workspace configuration")
            return False
    else:
        print("‚ùå Screenshot service not found")
        return False


def create_readme_for_workspace():
    """Create README for workspace directory"""
    readme_content = """# Workspace Directory

This directory contains all runtime artifacts and temporary files generated by the AVAI agent.

## Structure

- `screenshots/` - All screenshot files created by the system
- `temp/` - Temporary files and intermediate processing results
- `downloads/` - Downloaded files and resources
- `exports/` - Exported data and reports

## Screenshot Management

All screenshots are automatically saved to the `screenshots/` subdirectory to keep the project root clean.

## Cleanup

This directory can be safely cleaned periodically, but note that some files may be referenced by active sessions.
"""
    
    with open("workspace/README.md", 'w') as f:
        f.write(readme_content)
    
    print("‚úÖ Created workspace/README.md")


def main():
    """Main cleanup function"""
    print("üßπ Starting directory cleanup and organization...")
    print("=" * 50)
    
    # Create workspace structure
    create_workspace_structure()
    
    # Clean root directory
    moved_files = clean_root_directory()
    
    if moved_files:
        print("\nüì¶ Files moved:")
        for file_move in moved_files:
            print(f"   {file_move}")
    else:
        print("\n‚úÖ Root directory already clean")
    
    # Verify screenshot configuration
    print("\nüîç Verifying screenshot configuration...")
    verify_screenshot_configuration()
    
    # Create workspace README
    create_readme_for_workspace()
    
    print("\n" + "=" * 50)
    print("‚úÖ Directory cleanup completed!")
    print("üìÅ Screenshots will be saved to: workspace/screenshots/")
    print("üóÇÔ∏è  Root directory is organized and clean")


if __name__ == "__main__":
    main()
